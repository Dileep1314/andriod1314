/**
 * The aim of this file is to pull all keys from "keys.properties" file and make it
 * available for the build process.
 *
 * As build process runs on different systems we need to set a priority for it.
 * If current environment is:
 * Local: get keys from the keys.properties in debug or release folder as applicable.
 * AppCenter: get keys from its environment
 * CircleCI: We don't need keys (as we won't run UI tests on this env) so we just return a "".
 *
 */

ext.getIsCircleCI = {
    return System.getenv('IS_CIRCLE_CI')
}

ext.getIsAppCenter = {
    return System.getenv('IS_APP_CENTER')
}

ext.getIsCI = {
    if (getIsCircleCI()) return true
    if (getIsAppCenter()) return true

    return false
}

def getKeysProperties() {
    if (getIsCircleCI()) return ""

    def propsFile = getPropsFile()

    def keysProperties = new Properties()
    keysProperties.load(new FileInputStream(propsFile))
    return keysProperties
}

def getPropsFile() {
    def location = null
    // All Variants other than debug use release environment
    if (buildType.contains("debug")) location = "debug" else location = "release"

    if (!file("../app/src/${location}/keys.properties").exists()) {
        throw new GradleException("Could not load keys from \"/app/src/${location}/keys.properties\". Please ensure file exists in correct location")
    }
    return file("../app/src/${location}/keys.properties")
}

ext.getESRI_BASE_URL = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('ESRI_BASE_URL')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['ESRI_BASE_URL']
    } else {
        value = "\"" + value + "\""
    }
    return value
}

ext.getESRI_TOKEN_BASE_URL = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('ESRI_TOKEN_BASE_URL')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['ESRI_TOKEN_BASE_URL']
    } else {
        value = "\"" + value + "\""
    }
    return value
}

ext.getESRI_CLIENT_ID = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('ESRI_CLIENT_ID')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['ESRI_CLIENT_ID']
    } else {
        value = "\"" + value + "\""
    }
    return value
}

ext.getESRI_CLIENT_SECRET = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('ESRI_CLIENT_SECRET')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['ESRI_CLIENT_SECRET']
    } else {
        value = "\"" + value + "\""
    }
    return value
}

ext.getESRI_GRANT_TYPE = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('ESRI_GRANT_TYPE')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['ESRI_GRANT_TYPE']
    } else {
        value = "\"" + value + "\""
    }
    return value
}

ext.getREGISTRATION_BASE_URL = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('REGISTRATION_BASE_URL')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['REGISTRATION_BASE_URL']
    } else {
        value = "\"" + value + "\""
    }
    return value
}

ext.getGEO_API_KEY = {
    if (getIsCircleCI()) return "\"\""

    def value = System.getenv('GEO_API_KEY')
    if (value == null || value.length() == 0) {
        def keysProperties = getKeysProperties()
        value = keysProperties['GEO_API_KEY']
    } else {
        value = "\"" + value + "\""
    }
    return value
}
